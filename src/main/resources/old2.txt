*
package practice.piece

import practice.GameMaster
import practice.board.Piece
import practice.board.PieceColor
import practice.board.Square
import practice.board.LetterNumber

class King {
    companion object {
        fun kingMovement(gameMaster: GameMaster, square: Square): Boolean {

            val letterIndexMinus = square.letter.index - 1
            val letterIndexPlus = square.letter.index + 1
            val numberIndexMinus = square.number.index - 1
            val numberIndexPlus = square.number.index + 1

            val letter = square.letter
            val letterMinus = LetterNumber.getLetterEnum(letterIndexMinus)
            val letterPlus = LetterNumber.getLetterEnum(letterIndexPlus)
            val number = square.number
            val numberMinus = LetterNumber.getNumberEnum(numberIndexMinus)
            val numberPlus = LetterNumber.getNumberEnum(numberIndexPlus)

            val equal1 = gameMaster.equalLetterNumber(letterMinus, number)
            val equal2 = gameMaster.equalLetterNumber(letterMinus, numberPlus)
            val equal3 = gameMaster.equalLetterNumber(letterMinus, numberMinus)

            val equal4 = gameMaster.equalLetterNumber(letterPlus, number)
            val equal5 = gameMaster.equalLetterNumber(letterPlus, numberPlus)
            val equal6 = gameMaster.equalLetterNumber(letterPlus, numberMinus)

            val equalTop = gameMaster.equalLetterNumber(letter, numberPlus)
            val equalBottom = gameMaster.equalLetterNumber(letter, numberMinus)

            if (equal1 || equal2 || equal3 || equal4 || equal5 || equal6 || equalTop || equalBottom) {
                return true
            }

            return false
        }

        fun kingMoves(kingSquare: Square): List<Square> {

            val moves = mutableListOf<Square>()

            val letterIndexMinus = kingSquare.letter.index - 1
            val letterIndexPlus = kingSquare.letter.index + 1
            val numberIndexMinus = kingSquare.number.index - 1
            val numberIndexPlus = kingSquare.number.index + 1

            val letter = kingSquare.letter
            val letterMinus = LetterNumber.getLetterEnum(letterIndexMinus)
            val letterMinusLegal = LetterNumber.isEnumLegal(letterMinus)
            val letterPlus = LetterNumber.getLetterEnum(letterIndexPlus)
            val letterPlusLegal = LetterNumber.isEnumLegal(letterPlus)
            val number = kingSquare.number
            val numberMinus = LetterNumber.getNumberEnum(numberIndexMinus)
            val numberMinusLegal = LetterNumber.isEnumLegal(numberMinus)
            val numberPlus = LetterNumber.getNumberEnum(numberIndexPlus)
            val numberPlusLegal = LetterNumber.isEnumLegal(numberPlus)

            if (letterMinusLegal) {
                moves.add(Square(letterMinus, number, Piece.NONE, PieceColor.NONE))
                if (numberPlusLegal) {
                    moves.add(Square(letterMinus, numberPlus, Piece.NONE, PieceColor.NONE))
                }
                if (numberMinusLegal) {
                    moves.add(Square(letterMinus, numberMinus, Piece.NONE, PieceColor.NONE))
                }
            }
            if (letterPlusLegal) {
                moves.add(Square(letterPlus, number, Piece.NONE, PieceColor.NONE))
                if (numberPlusLegal) {
                    moves.add(Square(letterPlus, numberPlus, Piece.NONE, PieceColor.NONE))
                }
                if (numberMinusLegal) {
                    moves.add(Square(letterPlus, numberMinus, Piece.NONE, PieceColor.NONE))
                }
            }
            if (numberPlusLegal) {
                moves.add(Square(letter, numberPlus, Piece.NONE, PieceColor.NONE))
            }
            if (numberMinusLegal) {
                moves.add(Square(letter, numberMinus, Piece.NONE, PieceColor.NONE))
            }

            return moves
        }
    }
}

*
package practice.piece

import practice.GameMaster
import practice.board.*
import practice.board.LetterNumber

class Rook {
    companion object {
        fun rookMovement(board: Board, gameMaster: GameMaster, square: Square) : Boolean {
            return rookMovementTop(board, gameMaster, square) ||
                    rookMovementBottom(board, gameMaster, square) ||
                    rookMovementLeft(board, gameMaster, square) ||
                    rookMovementRight(board, gameMaster, square)
        }

        private fun rookMovementTop(board: Board, gameMaster: GameMaster, square: Square) : Boolean {

            for (i in square.number.index + 1 .. 7) {
                val rookMovementTopBottom = rookMovementTopBottom(board, gameMaster, square, i)
                rookMovementTopBottom?.let {
                    return rookMovementTopBottom
                }
            }

            return false
        }

        private fun rookMovementBottom(board: Board, gameMaster: GameMaster, square: Square) : Boolean {

            for (i in square.number.index - 1 downTo 0) {
                val rookMovementTopBottom = rookMovementTopBottom(board, gameMaster, square, i)
                rookMovementTopBottom?.let {
                    return rookMovementTopBottom
                }
            }

            return false
        }

        private fun rookMovementLeft(board: Board, gameMaster: GameMaster, square: Square) : Boolean {

            for (i in square.letter.index - 1 downTo 0) {
                val rookMovementLeftRight = rookMovementLeftRight(board, gameMaster, square, i)
                rookMovementLeftRight?.let {
                    return rookMovementLeftRight
                }
            }

            return false
        }

        private fun rookMovementRight(board: Board, gameMaster: GameMaster, square: Square) : Boolean {

            for (i in square.letter.index + 1 .. 7) {
                val rookMovementLeftRight = rookMovementLeftRight(board, gameMaster, square, i)
                rookMovementLeftRight?.let {
                    return rookMovementLeftRight
                }
            }

            return false
        }

        private fun rookMovementTopBottom(board: Board, gameMaster: GameMaster, square: Square, i: Int) : Boolean? {

            val letter = square.letter
            val number = LetterNumber.getNumberEnum(i)

            return rookMovementTopBottomLeftRight(board, gameMaster, letter, number)
        }

        private fun rookMovementLeftRight(board: Board, gameMaster: GameMaster, square: Square, i: Int) : Boolean? {

            val letter = LetterNumber.getLetterEnum(i)
            val number = square.number

            return rookMovementTopBottomLeftRight(board, gameMaster, letter, number)
        }

        private fun rookMovementTopBottomLeftRight(board: Board, gameMaster: GameMaster, letter: Letter, number: practice.board.Number) : Boolean? {

            val pieceColorFriendly = if (gameMaster.whiteToMove) PieceColor.WHITE else PieceColor.BLACK
            val pieceColorEnemy = if (gameMaster.whiteToMove) PieceColor.BLACK else PieceColor.WHITE

            var breakEnemy = false

            board.board.forEach board@ {
                if (it.letter == letter && it.number == number) {
                    if (it.pieceColor == pieceColorFriendly) {
                        return false
                    } else if (it.pieceColor == pieceColorEnemy) {
                        breakEnemy = true
                        return@board
                    }
                }
            }
            if (gameMaster.equalLetterNumber(letter, number)) {
                return true
            }
            if (breakEnemy) {
                return false
            }

            return null
        }

        fun rookChecksKingTop(board: Board, sqKing: Square, rookPieceColor: PieceColor): Boolean {

            for (i in sqKing.number.index - 1 downTo 0) {
                val rookChecksKingTopBottom = rookChecksKingTopBottom(board, sqKing, rookPieceColor, i)
                rookChecksKingTopBottom?.let {
                    return rookChecksKingTopBottom
                }
            }

            return false
        }

        fun rookChecksKingBottom(board: Board, sqKing: Square, rookPieceColor: PieceColor): Boolean {

            for (i in sqKing.number.index + 1 .. 7) {
                val rookChecksKingTopBottom = rookChecksKingTopBottom(board, sqKing, rookPieceColor, i)
                rookChecksKingTopBottom?.let {
                    return rookChecksKingTopBottom
                }
            }

            return false
        }

        fun rookChecksKingLeft(board: Board, sqKing: Square, rookPieceColor: PieceColor): Boolean {

            for (i in sqKing.letter.index - 1 downTo 0) {
                val rookChecksKingLeftRight = rookChecksKingLeftRight(board, sqKing, rookPieceColor, i)
                rookChecksKingLeftRight?.let {
                    return rookChecksKingLeftRight
                }
            }

            return false
        }

        fun rookChecksKingRight(board: Board, sqKing: Square, rookPieceColor: PieceColor): Boolean {

            for (i in sqKing.letter.index + 1 .. 7) {
                val rookChecksKingLeftRight = rookChecksKingLeftRight(board, sqKing, rookPieceColor, i)
                rookChecksKingLeftRight?.let {
                    return rookChecksKingLeftRight
                }
            }

            return false
        }

        private fun rookChecksKingTopBottom(board: Board, sqKing: Square, rookPieceColor: PieceColor, i: Int) : Boolean? {

            val letter = sqKing.letter
            val number = LetterNumber.getNumberEnum(i)

            return rookChecksKingTopBottomLeftRight(board, rookPieceColor, letter, number)
        }

        private fun rookChecksKingLeftRight(board: Board, sqKing: Square, rookPieceColor: PieceColor, i: Int) : Boolean? {

            val letter = LetterNumber.getLetterEnum(i)
            val number = sqKing.number

            return rookChecksKingTopBottomLeftRight(board, rookPieceColor, letter, number)
        }

        private fun rookChecksKingTopBottomLeftRight(board: Board, rookPieceColor: PieceColor, letter: Letter, number: practice.board.Number) : Boolean? {
            board.board.forEach board@ {
                if (it.letter == letter && it.number == number) {
                    if (it.piece == Piece.ROOK && it.pieceColor == rookPieceColor) {
                        return true
                    } else if (it.piece == Piece.ROOK || it.piece == Piece.KING) {
                        return false
                    }
                }
            }

            return null
        }
    }
}
*
